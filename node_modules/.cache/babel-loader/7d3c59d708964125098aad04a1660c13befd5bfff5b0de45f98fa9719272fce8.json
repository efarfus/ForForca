{"ast":null,"code":"import { Platform } from 'react-native';\nimport { Buffer } from 'buffer';\nexport async function fetchText(uri) {\n  if (!uri) {\n    return null;\n  }\n  if (uri.startsWith('data:image/svg+xml;utf8') && Platform.OS === 'android') {\n    return dataUriToXml(uri);\n  } else if (uri.startsWith('data:image/svg+xml;base64')) {\n    return decodeBase64Image(uri);\n  } else {\n    return fetchUriData(uri);\n  }\n}\nconst decodeBase64Image = uri => {\n  const decoded = decodeURIComponent(uri);\n  const splitContent = decoded.split(';')[1].split(',');\n  const dataType = splitContent[0];\n  const content = splitContent.slice(1).join(',');\n  return Buffer.from(content, dataType).toString('utf-8');\n};\nfunction dataUriToXml(uri) {\n  try {\n    // decode and remove data:image/svg+xml;utf8, prefix\n    return decodeURIComponent(uri).split(',').slice(1).join(',');\n  } catch (error) {\n    throw new Error(`Decoding ${uri} failed with error: ${error}`);\n  }\n}\nasync function fetchUriData(uri) {\n  const response = await fetch(uri);\n  if (response.ok || response.status === 0 && uri.startsWith('file://')) {\n    return await response.text();\n  }\n  throw new Error(`Fetching ${uri} failed with status ${response.status}`);\n}","map":{"version":3,"names":["Platform","Buffer","fetchText","uri","startsWith","OS","dataUriToXml","decodeBase64Image","fetchUriData","decoded","decodeURIComponent","splitContent","split","dataType","content","slice","join","from","toString","error","Error","response","fetch","ok","status","text"],"sources":["C:\\Users\\eduar\\Documents\\forforca\\eaddesenvweb\\ead_desenvwebfront\\node_modules\\react-native-svg\\src\\utils\\fetchData.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { Buffer } from 'buffer';\n\nexport async function fetchText(uri?: string): Promise<string | null> {\n  if (!uri) {\n    return null;\n  }\n  if (uri.startsWith('data:image/svg+xml;utf8') && Platform.OS === 'android') {\n    return dataUriToXml(uri);\n  } else if (uri.startsWith('data:image/svg+xml;base64')) {\n    return decodeBase64Image(uri);\n  } else {\n    return fetchUriData(uri);\n  }\n}\n\nconst decodeBase64Image = (uri: string) => {\n  const decoded = decodeURIComponent(uri);\n  const splitContent = decoded.split(';')[1].split(',');\n  const dataType = splitContent[0] as BufferEncoding;\n  const content = splitContent.slice(1).join(',');\n\n  return Buffer.from(content, dataType).toString('utf-8');\n};\n\nfunction dataUriToXml(uri: string): string | null {\n  try {\n    // decode and remove data:image/svg+xml;utf8, prefix\n    return decodeURIComponent(uri).split(',').slice(1).join(',');\n  } catch (error) {\n    throw new Error(`Decoding ${uri} failed with error: ${error}`);\n  }\n}\n\nasync function fetchUriData(uri: string) {\n  const response = await fetch(uri);\n  if (response.ok || (response.status === 0 && uri.startsWith('file://'))) {\n    return await response.text();\n  }\n  throw new Error(`Fetching ${uri} failed with status ${response.status}`);\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AACvC,SAASC,MAAM,QAAQ,QAAQ;AAE/B,OAAO,eAAeC,SAASA,CAACC,GAAY,EAA0B;EACpE,IAAI,CAACA,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACA,IAAIA,GAAG,CAACC,UAAU,CAAC,yBAAyB,CAAC,IAAIJ,QAAQ,CAACK,EAAE,KAAK,SAAS,EAAE;IAC1E,OAAOC,YAAY,CAACH,GAAG,CAAC;EAC1B,CAAC,MAAM,IAAIA,GAAG,CAACC,UAAU,CAAC,2BAA2B,CAAC,EAAE;IACtD,OAAOG,iBAAiB,CAACJ,GAAG,CAAC;EAC/B,CAAC,MAAM;IACL,OAAOK,YAAY,CAACL,GAAG,CAAC;EAC1B;AACF;AAEA,MAAMI,iBAAiB,GAAIJ,GAAW,IAAK;EACzC,MAAMM,OAAO,GAAGC,kBAAkB,CAACP,GAAG,CAAC;EACvC,MAAMQ,YAAY,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC;EACrD,MAAMC,QAAQ,GAAGF,YAAY,CAAC,CAAC,CAAmB;EAClD,MAAMG,OAAO,GAAGH,YAAY,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAE/C,OAAOf,MAAM,CAACgB,IAAI,CAACH,OAAO,EAAED,QAAQ,CAAC,CAACK,QAAQ,CAAC,OAAO,CAAC;AACzD,CAAC;AAED,SAASZ,YAAYA,CAACH,GAAW,EAAiB;EAChD,IAAI;IACF;IACA,OAAOO,kBAAkB,CAACP,GAAG,CAAC,CAACS,KAAK,CAAC,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC9D,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,YAAYjB,GAAG,uBAAuBgB,KAAK,EAAE,CAAC;EAChE;AACF;AAEA,eAAeX,YAAYA,CAACL,GAAW,EAAE;EACvC,MAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAACnB,GAAG,CAAC;EACjC,IAAIkB,QAAQ,CAACE,EAAE,IAAKF,QAAQ,CAACG,MAAM,KAAK,CAAC,IAAIrB,GAAG,CAACC,UAAU,CAAC,SAAS,CAAE,EAAE;IACvE,OAAO,MAAMiB,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B;EACA,MAAM,IAAIL,KAAK,CAAC,YAAYjB,GAAG,uBAAuBkB,QAAQ,CAACG,MAAM,EAAE,CAAC;AAC1E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}